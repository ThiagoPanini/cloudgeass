{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Cloudgeass","text":""},{"location":"#visao-geral","title":"Vis\u00e3o Geral","text":"<p>Cloudgeass \u00e9 uma biblioteca Python criada para centralizar uma s\u00e9rie de m\u00f3dulos, classes, m\u00e9todos e fun\u00e7\u00f5es prontas para serem utilizadas nos mais variados servi\u00e7os da AWS. Inspirado em um renomado anime japon\u00eas, o cloudgeass visa proporcionar um maior controle sobre atividades e opera\u00e7\u00f5es comumente realizadas em aplica\u00e7\u00f5es criadas na nuvem.</p> cloudgeass     Python Library"},{"location":"#instalacao","title":"Instala\u00e7\u00e3o","text":"<p>A \u00faltima vers\u00e3o da biblioteca cloudgeass j\u00e1 est\u00e1 publicada no PyPI e dispon\u00edvel para uso totalmente gratuito por qualquer um interessado em aprimorar a constru\u00e7\u00e3o de suas aplica\u00e7\u00f5es em um ambiente de nuvem. Para iniciar sua jornada de uso, basta realizar sua instala\u00e7\u00e3o atrav\u00e9s do seguinte comando:</p> <pre><code>pip install cloudgeass\n</code></pre> Dica: sobre ambientes virtuais Python <p>Em geral, uma boa pr\u00e1tica relacionada a cria\u00e7\u00e3o de novos projetos Python diz respeito \u00e0 cria\u00e7\u00e3o e uso de ambientes virtuais (ou virtual environments, no ingl\u00eas). Criar um venv para cada projeto Python iniciado permite, entre outras vantagens, ter em m\u00e3os um ambiente isolado com um controle mais refinado sobre as depend\u00eancias utilizadas.</p> Criando ambientes virtuais <p>Para criar um ambiente virtual Python, basta navegar at\u00e9 um diret\u00f3rio escolhido para organizar todos os virtual envs criados e executar o seguinte comando:</p> <pre><code>python -m venv &lt;nome_venv&gt;\n</code></pre> <p>Onde <code>&lt;nome_venv&gt;</code> deve ser substitu\u00eddo pelo nome escolhido para o ambiente virtual a ser criado. \u00c9 comum ter nomes de ambientes virtuais associados \u00e0 projetos (ex: <code>cloudgeass_venv</code>).</p> Acessando ambientes virtuais <p>Criar um virtual env \u00e9 apenas a primeira etapa do processo. Ap\u00f3s criado, o ambiente precisa ser explicitamente acessado pelo usu\u00e1rio para garantir que todas as a\u00e7\u00f5es subsequentes relacionadas \u00e0 instala\u00e7\u00e3o de bibliotecas sejam realizadas, de fato, no ambiente isolado criado.</p> <p>Se o sistema operacional utilizado \u00e9 Windows, ent\u00e3o use o comando abaixo para acessar o ambiente virtual Python:</p> <pre><code># Acessando ambiente virtual no Windows\n&lt;caminho_venv&gt;/Scripts/activate\n</code></pre> <p>Em caso de uso de um sistema operacional Linux (ou Git Bash no Windows), o comando possui pequenas altera\u00e7\u00f5es e \u00e9 dado por:</p> <pre><code># Acessando ambiente virtual no Linux\nsource &lt;caminho_venv&gt;/Scripts/activate\n</code></pre> <p>Onde <code>&lt;caminho_venv&gt;</code> \u00e9 a refer\u00eancia da localiza\u00e7\u00e3o do ambiente virtual rec\u00e9m criado. Por exemplo, se voc\u00ea criou o ambiente virtual de nome test_venv no seu diret\u00f3rio de usu\u00e1rio, ent\u00e3o <code>&lt;caminho_venv&gt;</code> pode ser substitu\u00eddo por <code>C:\\Users\\usuario\\test_venv</code> no Windows ou simplesmente <code>~/test_venv</code> no Linux.</p> <p>Para mais informa\u00e7\u00f5es, o excelente artigo do blog Real Python poder\u00e1 esclarecer uma s\u00e9rie de d\u00favidas envolvendo a cria\u00e7\u00e3o e o uso de ambientes virtuais Python.</p>"},{"location":"#exemplo-basico-de-uso","title":"Exemplo B\u00e1sico de Uso","text":"<p>Agora que o cloudgeass foi instalado com sucesso, todo o seu leque de funcionalidades se encontra dispon\u00edvel para utiliza\u00e7\u00e3o e suas fun\u00e7\u00f5es e m\u00e9todos poder\u00e3o ser importadas em aplica\u00e7\u00f5es Python.</p> <p>Como um exemplo b\u00e1sico de utiliza\u00e7\u00e3o, o bloco de c\u00f3digo abaixo pode ser utilizado para coletar a \u00faltima parti\u00e7\u00e3o de data de uma tabela externa armazenada no S3 com base em seu prefixo:</p> Coletando a \u00faltima parti\u00e7\u00e3o de uma tabela no S3 <pre><code># Importando fun\u00e7\u00e3o\nfrom cloudgeass.aws.s3 import get_last_partition\n\n# Definindo vari\u00e1veis para parametriza\u00e7\u00e3o da fun\u00e7\u00e3o\nbucket_name = \"example-bucket\"\ntable_prefix = \"tbl_name\"\n\n# Coletando \u00faltima parti\u00e7\u00e3o\nlast_partition = get_last_partition(bucket_name, table_prefix)\n</code></pre> <p>Curioso para mais exemplos? N\u00e3o deixe de navegar pelas funcionalidades da biblioteca nesta mesma documenta\u00e7\u00e3o para encontrar maiores detalhes.</p>"},{"location":"#contatos","title":"Contatos","text":"<ul> <li> @ThiagoPanini</li> <li> Thiago Panini</li> <li> panini-tech-lab</li> </ul>"},{"location":"motivacao/","title":"A Hist\u00f3ria da Cria\u00e7\u00e3o da Biblioteca","text":""},{"location":"motivacao/#uma-jornada-tipica-na-aws","title":"Uma Jornada T\u00edpica na AWS","text":"<p>Desenvolver solu\u00e7\u00f5es utilizando servi\u00e7os da AWS \u00e9, em geral, uma tarefa desafiadora. At\u00e9 que se tenha uma no\u00e7\u00e3o clara sobre as diversas possibilidades existentes, \u00e9 preciso muito estudo, pesquisa e explora\u00e7\u00e3o.</p> <p>Ap\u00f3s o primeiro contato com o boto3, percebi o qu\u00e3o imenso foi o leque de op\u00e7\u00f5es aberto. A partir deste ponto, mergulhei em jornadas de desenvolvimento de aplica\u00e7\u00f5es, sejam elas utilizando Lambda, EC2, Glue ou qualquer outro servi\u00e7o que envolvia uma camada computacional onde o boto3 pudesse brilhar.</p> <p>Ao longo do tempo, notei que algumas opera\u00e7\u00f5es codificadas com o citado SDK Python tinham caracter\u00edsticas similares ou at\u00e9 mesmo id\u00eanticas. Por exemplo, a cada necessidade de listar objetos em um bucket S3 em uma nova aplica\u00e7\u00e3o, o mesmo c\u00f3digo era simplesmente \"copiado e colado\". Esse foi o principal gatilho para questionar:</p> <p>\"Seria poss\u00edvel construir um conjunto de funcionalidades comuns do boto3 capazes de serem encapsuladas em uma nova biblioteca Python?\"</p>"},{"location":"motivacao/#o-inicio-do-projeto","title":"O In\u00edcio do Projeto","text":"<p>Buscando uma resposta para o questionamento acima, decidi mapear algumas a\u00e7\u00f5es comumente realizadas via boto3 na AWS com uma boa margem de encapsulamento.</p> <p>Como j\u00e1 citado anteriormente, imagine uma aplica\u00e7\u00e3o constru\u00edda que, em um determinado momento, necessite obter uma rela\u00e7\u00e3o de objetos presentes em um bucket S3. Um c\u00f3digo para este processo poderia ser dado por:</p> <pre><code># Importando bibliotecas\nimport boto3\n\n# Criando client s3\ns3_client = boto3.client(\"s3\")\n\n# Realizando chamada de API para listagem\nr = client.list_objects_v2(\n    Bucket=bucket_name,\n    Prefix=prefix\n)\n\n# Obtendo conte\u00fado do bucket\nbucket_content = r[\"Contents\"]\n</code></pre> O c\u00f3digo poderia ainda conter elementos adicionais <p>Algumas pr\u00e1ticas como o tratamento de exce\u00e7\u00f5es e a escrita de mensagens claras de log poderiam fazer parte do snippet acima e sua vers\u00e3o final poderia ser dada por:</p> <pre><code># Importando bibliotecas\nimport boto3\n\n# Criando client s3\ns3_client = boto3.client(\"s3\")\n\n# Realizando chamada de API para listagem de objetos de bucket\ntry:\n    r = client.list_objects_v2(\n        Bucket=bucket_name,\n        Prefix=prefix\n    )\n\nexcept Exception as e:\n    logger.error(\"Erro ao realizar chamada client.list_objects_v2() \"\n                 f\"com Bucket={bucket_name} e Prefix={prefix}. \"\n                 f\"Exception: {e}\")\n    raise e\n\n# Retornando conte\u00fado do bucket\ntry:\n    bucket_content = r[\"Contents\"]\n\nexcept KeyError:\n    logger.warning(f\"Erro ao extrair conte\u00fado do bucket {bucket_name}. \"\n                   f\"Provavelmente o bucket encontra-se sem objetos.\")\n    return None\n</code></pre> <p>Imagine repetir este bloco de c\u00f3digo sempre que uma necessidade do tipo se fizer presente em cada nova aplica\u00e7\u00e3o constru\u00edda na AWS. Um dos grandes objetivos do cloudgeass, como biblioteca, foi justamente endere\u00e7ar a consolida\u00e7\u00e3o de tais opera\u00e7\u00f5es comuns para que um processo simples como esse pudesse ser acionado por usu\u00e1rios a partir da chamada de uma \u00fanica fun\u00e7\u00e3o.</p> <pre><code># Importando fun\u00e7\u00e3o\nfrom cloudgeass.aws.s3 import bucket_objects_report\n\n# Obtendo report de objetos de um bucket s3\nbucket_objects = bucket_objets_report(bucket_name=bucket_name)\n</code></pre> <p>Todas as boas pr\u00e1ticas de c\u00f3digo, como o tratamento de exce\u00e7\u00e3o e as mensagens de logs estariam prontamente codificadas e dispon\u00edveis para uso.</p>"},{"location":"reqs/","title":"Pr\u00e9 Requisitos de Uso","text":""},{"location":"reqs/#visao-do-usuario","title":"Vis\u00e3o do Usu\u00e1rio","text":"<p>A biblioteca cloudgeass foi imaginada como uma forma r\u00e1pida e eficiente de facilitar o trabalho do usu\u00e1rio no desenvolvimento de novas aplica\u00e7\u00f5es que envolvam opera\u00e7\u00f5es na AWS. Para iniciar sua jornada de uso, basta ter em m\u00e3os:</p> <ul> <li> Python 3 instalado</li> <li> Acesso program\u00e1tico na AWS</li> </ul> Configurando chaves de acesso program\u00e1tico na AWS <p>Para que as opera\u00e7\u00f5es encapsuladas pelo cloudgeass tenham o efeito desejado, \u00e9 preciso utiliz\u00e1-lo a partir de uma entidade (usu\u00e1rio ou servi\u00e7o) com acessos \u00e0 provedora cloud j\u00e1 configurados.</p> <p>Em caso de utiliza\u00e7\u00e3o da biblioteca em um servi\u00e7o AWS, como por exemplo, fun\u00e7\u00f5es Lambda, as roles IAM possuem o papel de fornecer os acessos tempor\u00e1rios necess\u00e1rios para que as opera\u00e7\u00f5es na nuvem possam ser executadas entre os servi\u00e7os.</p> <p>Supondo agora o uso local da biblioteca para valida\u00e7\u00e3o e constru\u00e7\u00e3o de aplica\u00e7\u00f5es antes da fase de implanta\u00e7\u00e3o na nuvem, \u00e9 preciso realizar a configura\u00e7\u00e3o das credenciais atrav\u00e9s das chaves de acesso de um usu\u00e1rio que tenham as permiss\u00f5es atreladas \u00e0 opera\u00e7\u00e3o que se deseja fazer via cloudgeass. As chaves de acesso s\u00e3o dadas pela <code>access_key_id</code> e pela <code>secret_access_key</code> e seu processo de configura\u00e7\u00e3o \u00e9 dado atrav\u00e9s do seguinte comando:</p> <pre><code>aws configure\n</code></pre> <p>Para maiores informa\u00e7\u00f5es a cerca deste processo, a seguinte documenta\u00e7\u00e3o da AWS poder\u00e1 auxiliar.</p>"},{"location":"reqs/#dependencias-da-biblioteca","title":"Depend\u00eancias da Biblioteca","text":"<p>No final do dia, o cloudgeass \u00e9 um pacote Python que funciona como uma esp\u00e9cie de wrapper do boto3, famoso SDK Python para desenvolvimento na AWS. Neste contexo, uma s\u00e9rie de outras bibliotecas fazem parte da orquestra e possuem pap\u00e9is espec\u00edficos.</p> <p>Diante disso, al\u00e9m do boto3 j\u00e1 citado, fazem parte das depend\u00eancias do cloudgeass:</p> Biblioteca Descri\u00e7\u00e3o e uso pandas Poderosa ferramenta de manipula\u00e7\u00e3o e an\u00e1lise de dados. Grande parte das funcionalidades do cloudgeass envolve a obten\u00e7\u00e3o de respostas como DataFrames do pandas. s3fs Funciona como uma interface para opera\u00e7\u00f5es de arquivos no S3 via Python. No projeto, essa biblioteca \u00e9 utilizada principalmente para habilitar a leitura de objetos no S3 via pandas atrav\u00e9s da URI dos mesmos. pyarrow Proporciona uma interface com o pandas para a leitura otimizada de arquivos com extens\u00f5es espec\u00edficas, como por exemplo, o formato parquet. Preciso instalar cada uma das depend\u00eancias? <p>A resposta \u00e9 n\u00e3o. No arquivo de setup da biblioteca, todas as depend\u00eancias listadas j\u00e1 est\u00e3o endere\u00e7adas e ser\u00e3o automaticamente instaladas no ambiente virtual do usu\u00e1rio assim que o comando <code>pip install cloudgeass</code> for executado.</p>"},{"location":"template/extensions/","title":"Teste de Extens\u00f5es do Template","text":""},{"location":"template/extensions/#listas","title":"Listas","text":""},{"location":"template/extensions/#nao-numeradas","title":"N\u00e3o numeradas","text":"<ul> <li>Item 1</li> <li>Item 2</li> <li>Item 3</li> </ul>"},{"location":"template/extensions/#numeradas","title":"Numeradas","text":"<ol> <li>Item 1</li> <li>Item 2</li> <li>Item 3</li> </ol>"},{"location":"template/extensions/#tarefas","title":"Tarefas","text":"<ul> <li> Tarefa 1</li> <li> Tarefa 2</li> <li> Tarefa 3</li> </ul>"},{"location":"template/extensions/#texto","title":"Texto","text":"<p>Negrito</p> <p>It\u00e1lico</p> <p><code>codigo=42</code></p> <p>Emoji:  </p> <p>Tachado</p> <p>Real\u00e7ado</p>"},{"location":"template/extensions/#blocos-e-estruturas","title":"Blocos e Estruturas","text":"note <p>Anota\u00e7\u00f5es importantes</p> info <p>Informa\u00e7\u00f5es gerais</p> question <p>Quest\u00f5es importantes</p> warning <p>Descri\u00e7\u00e3o do alerta</p> danger <p>Descri\u00e7\u00e3o do perigo</p> Success <p>Opera\u00e7\u00e3o bem sucedida</p> example <p>Exemplo de uso</p> tip <p>Insira + ap\u00f3s ? para deixar o bloco aberto por padr\u00e3o</p>"},{"location":"template/extensions/#tabela","title":"Tabela","text":"Coluna 1 Coluna 2 Categoria Valor"},{"location":"template/extensions/#citacao","title":"Cita\u00e7\u00e3o","text":"<p>Algu\u00e9m falou</p>"}]}